<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAADAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgL9ADIe+SHmHvUflh71H+Yi9
        R5qAv0AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhr5IUoi9SIuEuUYdh71HbIe9R+mHvUf/h71H/4e9
        R/+HvUf/h71H5Ya8RlAAAAAAAAAAAAAAAAAAAAAAAAAAAIa9R8mHvUf/h71H/4e9R/+HvUf/h71H/4e9
        R/+HvUf/h71H/4e9R/+HvUf+h7xImYC/QBAAAAAAAAAAAIe9RkKHvUf/h71H/4e9R/+HvUf/h71G5Ii9
        R6+IvUirh71Hqoe+R6iHvkd9iL1H1oe9R/+GvUfth71IYP//AAGHvEe0h71H/4e9R/+HvUf/h71H/4e9
        R/+HvUf/h71H/4e9R/+HvUf+h75Fgoe+SL2GvUeWh71H+4e9R/+HvEaRh71Hs4e9R/6HvUf/h71H/4e9
        R/+HvUf/h71H+Ie9R4yGvEZjh71Hm4i+RpyHvEbHh71H8oe9R4iJvEfPh71G0gAAAACGv0Yoh71Hl4e9
        R+GHvUf7iL1HzYa8SDkAAAAAAAAAAIm8RkWHvUfZhr1HyYa8SHKHvkigh8NLEQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIC/QBCHvUeXh71H6Ie9R+iHvEaViLtEDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIC/QASGvUfJh71H/4e8R7CHvEesh71H/4e8RseqqlUDAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACIvkdPh71H/4e9R9iHvUZ7hr1HcIe9R86HvUf/iL1GTQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAiL1GeIe9R/+HvUf3iLxHa4a8R3aHvUfzh71H/4e9R3cAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIa+SFKHvUf/h71H44e8RluGvkhuh71H9Ie9R/+GvEZQAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAqlUGh71G0oe9R/+HvUa1h71Htoe9R/+HvUfQgKpVBgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIXCRxmHvUemiL1H74e9R+6GvUelir9KGAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD+PwAA2B8AAIAHAACAIwAAAAAAAACAAADDywAA/D8AAPgf
        AAD5nwAA+Z8AAPmfAAD4HwAA/D8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAIAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAgLZJDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACIu0otiL1Hmoa9R+2HvUf/h71H6Ye9R4SLuUYLAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACIu0Qeh7xImYe9R/uHvUf/h71H/4e9R/+HvUf/h71H/4e9R9eIvUY6AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACGvEZQiL1GaYCA
        gAIAAAAAAAAAAAAAAACHvEQih75IoIe9R/yHvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9
        R/6HvEedgL9AEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgL9ACIe9
        R+iHvUf/h75Hw4W/RiyHv0ckhr1Ikoe9R/mHvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9
        R/+HvUf/h71H/4e9R/+HvEfmhrxGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACHvUhgh71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9
        R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf+h7xImYC/QBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIe9R9CHvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9
        R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71G5Ii9Rk0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACGvkhKh71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H+oe9
        SMSGvUeWhrxIcoe+RmaHvkZmh75GZoe+RmaHvkZmiLxHeoi9R82HvUf/h71H/4e9R/+HvUf/h71H/4e8
        R7SJv0kcAAAAAAAAAAAAAAAAAAAAAIe9SL2HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9
        R/+HvEaRh71Hl4i8R8+HvUfph71H/4e9R/+HvUf/h71H/4e9R/2GvUaDhL1KH4e7SWKHvUfwh71H/4e9
        R/+HvUf/h71H/4e9R/GIvEhn//8AAQAAAACHu0kxh71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9
        R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/6GvkhOh75Hw4q8
        Rz2GvEe4h71H/4e9R/+HvUf/h71H/4e9R/+IvUirkrZJB4e+SKSHvUf/h71H/4e9R/+HvUf/h71H/4e9
        R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71Hpoa+
        R4GHvUf/h71G9oe8R3OHvElmh71H8Ye9R/+HvUf/h71H/4e9R/+Hvkigh71H9Ie9R/+HvUf/h71H/4e9
        R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71I3Ye+SKCGvkhuh71IWYm8
        SVSIu0g8iL5HjYe9R/2HvUf/h71H/4e9R8WJvEtBh75Hu4e9R/+HvUf/h71H/4e9R+WIu0oth7xHnYe9
        R/eHvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H5Ye9RkL//wABgL9ABIa9
        RoOHvUf9h71H/4e9R/+HvUeiiL5HT4a9R9yHvUf/h71H/4e9RvaHvkZ1h71HaIi+R96HvUf+h7xHggAA
        AAAAAAAAi7lGFoe+R32HvEfmh71H/4e9R/+HvUf/h71H/4e9R/+HvUf/h71H/4e9R9uKvUkjAAAAAAAA
        AAAAAAAAAAAAAIm/STiHvUfRh71H/4e9R/+HvUbkh71IVYe8RoqHvUf4h71H/4e9R/6GvkhSAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAICqVQaIvEhch71GtYe9R/eHvUf/h71H8Ie9R86HvUd3gL9ADAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIC/QASIvEdvh75H4oe9R/+HvUbkh75GM4S9TBuIvkdPibtEKQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACGvEMTh71IgIa8SMuHvUf1h71H9Ye9R8qIvEd+jrhHEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        Qf//g8H//8GD///gB///8A////gf////////////
</value>
  </data>
</root>